import numpy as np

w0 = np.zeros((25))

# набор данных для обучения
D = np.array([
    [1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,],

    [1, 1, 1, 1, 1,
    1, 0, 0, 0, 1,
    1, 1, 1, 0, 1,
    1, 0, 0, 0, 1,
    1, 1, 1, 1, 1,],

    [1, 1, 1, 1, 1,
    1, 0, 0, 0, 1,
    1, 1, 0, 1, 1,
    1, 0, 0, 0, 1,
    1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 0,
     1, 0, 0, 1, 1,
     1, 1, 0, 1, 1,
     1, 1, 0, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
    0, 0, 0, 0, 1,
    0, 1, 1, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,],

    [0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,],

    [1, 1,1, 1, 1,
    0, 0, 1, 0, 0,
    0, 0, 1, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,],

    [1, 1, 1, 1, 1,
    1, 0, 0, 0, 1,
    1, 0, 0, 0, 1,
    1, 0, 0, 0, 1,
    1, 1, 1, 1, 1,],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 0, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     0, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 0, 1, 1,
     1, 1, 1, 0, 1,
     1, 0, 1, 1, 0,
     1, 1, 1, 1, 1,
     1, 0, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 0, 1, 1, 1,
     1, 1, 0, 1, 1, ],

    [1, 1, 1, 1, 0,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 0, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     0, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 0, 1, 1,
     1, 0, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 0,
     1, 1, 1, 1, 1,
     1, 1, 0, 1, 1,
     1, 0, 1, 1, 1,
     0, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     0, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 0, ],

    [0, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 0, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 0, 1, 0, 1,
     1, 1, 1, 1, 1, ],

    [0, 0, 0, 0, 0,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     0, 0, 0, 0, 0, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1,
     1, 0, 0, 0, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 0, 1, 1,
     1, 0, 1, 0, 1,
     1, 1, 0, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 0, 1, 1,
     1, 0, 0, 0, 1,
     1, 1, 0, 1, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 1, 1, 1, 0,
     0, 0, 0, 0, 0,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 1, 1, 0, 0,
     0, 0, 0, 0, 0,
     1, 1, 1, 1, 1, ],

    [0, 1, 1, 1, 0,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 0, 0, 0, 1,
     0, 1, 1, 1, 0, ],

    [0, 1, 1, 1, 0,
     1, 1, 0, 1, 1,
     1, 1, 1, 0, 1,
     1, 0, 0, 0, 1,
     0, 1, 1, 1, 0, ],

    [0, 1, 1, 1, 0,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     0, 1, 1, 1, 0, ],

    [0, 1, 1, 1, 0,
     1, 1, 0, 1, 1,
     1, 1, 1, 0, 1,
     1, 0, 0, 0, 1,
     0, 1, 1, 1, 0, ],

    [1, 0, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,],

    [1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 0, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,],

    [1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1,0,  1, 1,
    1, 1, 1, 1, 1,],

    [1, 0, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,],

    [1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,
    1, 1, 1, 1, 1,],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 1, 1, 1, 1],

    [1, 0, 1, 0, 1,
     0, 1, 0, 1, 0,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 1, 1, 1, 1]
])
print(len(D))
# желаемые результаты от входных данных для обучения
Y0 = np.array([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0])
print(len(Y0))

α =  0.3  # скорость обучения
β = -0.4 
σ = lambda x: 1 if x > 0 else 0  # функция активации нейрона

def f(x, _w):
    s = β + np.sum(x @ _w)
    return σ(s)

def train(w, D, Y):
    _w = w.copy()
    for x, y in zip(D, Y):
        w += α * (y - f(x, w)) * x
    return (w != _w).any()

while train(w0, D, Y0) :
    print(w0)

D = np.array([


    [1, 1, 1, 1, 1,
     1, 0, 0, 0, 1,
     1, 1, 1, 0, 1,
     1, 0, 0, 0, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 0, 0, 0, 1,
     1, 1, 1, 1, 1,
     1, 0, 0, 0, 1,
     1, 1, 1, 1, 1, ],

    [1, 1, 1, 1, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 0, 1,
     1, 1, 1, 1, 1],

    [1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 1],

    [1, 0, 1, 0, 1,
     0, 1, 0, 1, 0,
     1, 1, 1, 1, 1,
     1, 1, 1, 1, 0,
     1, 1, 1, 1, 1]

])
print("вход                               результат")
for x in D:
    print(x, "  ", f(x, w0))
